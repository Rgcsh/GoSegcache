// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: go_segcache.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoSegcacheApi_Set_FullMethodName = "/GoSegcacheApi/Set"
	GoSegcacheApi_Get_FullMethodName = "/GoSegcacheApi/Get"
)

// GoSegcacheApiClient is the client API for GoSegcacheApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoSegcacheApiClient interface {
	// 存储缓存key,value
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResponse, error)
	// 根据缓存key获取缓存值
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResponse, error)
}

type goSegcacheApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSegcacheApiClient(cc grpc.ClientConnInterface) GoSegcacheApiClient {
	return &goSegcacheApiClient{cc}
}

func (c *goSegcacheApiClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, GoSegcacheApi_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSegcacheApiClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GoSegcacheApi_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSegcacheApiServer is the server API for GoSegcacheApi service.
// All implementations must embed UnimplementedGoSegcacheApiServer
// for forward compatibility
type GoSegcacheApiServer interface {
	// 存储缓存key,value
	Set(context.Context, *SetReq) (*SetResponse, error)
	// 根据缓存key获取缓存值
	Get(context.Context, *GetReq) (*GetResponse, error)
	mustEmbedUnimplementedGoSegcacheApiServer()
}

// UnimplementedGoSegcacheApiServer must be embedded to have forward compatible implementations.
type UnimplementedGoSegcacheApiServer struct {
}

func (UnimplementedGoSegcacheApiServer) Set(context.Context, *SetReq) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedGoSegcacheApiServer) Get(context.Context, *GetReq) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGoSegcacheApiServer) mustEmbedUnimplementedGoSegcacheApiServer() {}

// UnsafeGoSegcacheApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSegcacheApiServer will
// result in compilation errors.
type UnsafeGoSegcacheApiServer interface {
	mustEmbedUnimplementedGoSegcacheApiServer()
}

func RegisterGoSegcacheApiServer(s grpc.ServiceRegistrar, srv GoSegcacheApiServer) {
	s.RegisterService(&GoSegcacheApi_ServiceDesc, srv)
}

func _GoSegcacheApi_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSegcacheApiServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSegcacheApi_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSegcacheApiServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSegcacheApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSegcacheApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSegcacheApi_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSegcacheApiServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSegcacheApi_ServiceDesc is the grpc.ServiceDesc for GoSegcacheApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSegcacheApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoSegcacheApi",
	HandlerType: (*GoSegcacheApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _GoSegcacheApi_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GoSegcacheApi_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_segcache.proto",
}
